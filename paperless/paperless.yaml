apiVersion: apps/v1
kind: Deployment
metadata:
  name: paperless
  namespace: default
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: paperless
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: paperless
    spec:
      volumes:
        - name: paperless-pvc
          persistentVolumeClaim:
            claimName: paperless-pvc
      # https://github.com/paperless-ngx/paperless-ngx/blob/main/docker/compose/docker-compose.postgres.yml
      containers:
        - image: docker.io/library/postgres:16
          imagePullPolicy: Always
          name: postgres
          env:
            - name: POSTGRES_USER
              value: "paperless"
            - name: POSTGRES_PASSWORD
              value: "paperless"
            - name: POSTGRES_DB
              value: "paperless"
            - name: POSTGRES_INITDB_ARGS
              value: "--data-checksums"
            - name: PAPERLESS_APPS
              value: allauth.socialaccount.providers.openid_connect
            - name: PAPERLESS_SOCIALACCOUNT_PROVIDERS
              value: |
                {
                  "openid_connect": {
                    "APPS": [
                      {
                        "provider_id": "authentik",
                        "name": "Authentik",
                        "client_id": "A6CKPWClientyJi20famWIoxzEZvZcHEcK2N2d8jtwNQMS",
                        "secret": "7FRQubDqioNL2UVY0yhSy39M76gUH7L4BwqU9pgcM9QKM3d7NfAbrlHNz4bG8alijM5rhHbJ7sgLQaiZ0DwbaIs2zZkG95fLtB6Jz3eKzyxKKX7gF8EhVTlSHyP92BtN",
                        "settings": {
                          "server_url": "http://192.168.2.221:9000/application/o/<application_slug>/.well-known/openid-configuration"
                        }
                      }
                    ],
                    "OAUTH_PKCE_ENABLED": "True"
                  }
                }
          volumeMounts:
            - mountPath: "/var/lib/postgresql/data"
              subPath: "postgresql_16"
              name: paperless-pvc
          startupProbe:
            exec:
              command:
                - pg_isready
                - -U
                - paperless
                - -d
                - paperless
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - paperless
                - -d
                - paperless
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - paperless
                - -d
                - paperless
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            limits:
              cpu: 100m
              memory: 200Mi
            requests:
              cpu: 10m
              memory: 50Mi
        - image: redis:latest
          imagePullPolicy: Always
          name: redis
          volumeMounts:
            - mountPath: "/data"
              subPath: "redis"
              name: paperless-pvc
          resources:
            limits:
              cpu: 100m
              memory: 400Mi
            requests:
              cpu: 40m
              memory: 50Mi
        - image: paperlessngx/paperless-ngx:latest
          imagePullPolicy: Always
          name: paperless
          volumeMounts:
            - mountPath: /usr/src/paperless/data
              subPath: "paperless/data"
              name: paperless-pvc
            - mountPath: /usr/src/paperless/media
              subPath: "paperless/media"
              name: paperless-pvc
            - mountPath: /usr/src/paperless/export
              subPath: "paperless/export"
              name: paperless-pvc
            - mountPath: /usr/src/paperless/consume
              subPath: "paperless/consume"
              name: paperless-pvc
          ports:
            - containerPort: 8000
              name: paperless-tcp
              protocol: TCP
          startupProbe:
            httpGet:
              path: /
              port: 8000
            initialDelaySeconds: 180
            timeoutSeconds: 10
            periodSeconds: 10
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /
              port: 8000
            initialDelaySeconds: 60
            timeoutSeconds: 10
            periodSeconds: 10
            failureThreshold: 5
          livenessProbe:
            httpGet:
              path: /
              port: 8000
            initialDelaySeconds: 60
            timeoutSeconds: 10
            periodSeconds: 10
            failureThreshold: 5
          env:
            - name: PAPERLESS_REDIS
              value: "redis://localhost:6379"
            - name: PAPERLESS_DBHOST
              value: "localhost"
            - name: USERMAP_UID
              value: "1000"
            - name: USERMAP_GID
              value: "1000"
            - name: PAPERLESS_PORT
              value: "8000"
            - name: PAPERLESS_ADMIN_USER
              value: "blablack"
            - name: PAPERLESS_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: paperless-password
          resources:
            limits:
              cpu: 600m
              memory: 2000Mi
            requests:
              cpu: 20m
              memory: 200Mi
      dnsPolicy: "None"
      dnsConfig:
        nameservers:
          - 10.43.0.22
---
apiVersion: v1
kind: Service
metadata:
  name: paperless
  namespace: default
  annotations:
    metallb.io/address-pool: default
    metallb.io/loadBalancerIPs: 192.168.2.216
spec:
  externalTrafficPolicy: Local
  selector:
    app: paperless
  ports:
    - port: 80
      targetPort: 8000
      protocol: TCP
  type: LoadBalancer
