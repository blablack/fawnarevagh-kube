- name: Setup network
  hosts: all
  become: true

  tasks:
    - name: Disable cloud network config
      ansible.builtin.copy:
        src: all/99-disable-network-config.cfg
        dest: /etc/cloud/cloud.cfg.d/
    - name: Empty /etc/netplan
      ansible.builtin.shell:
        cmd: rm -rf /etc/netplan/*

- name: Setup network on Nucio
  hosts: nucio
  become: true

  tasks:
    - name: Copy Netplan configuration
      ansible.builtin.copy:
        src: nucio/00-myconfig.yaml
        dest: /etc/netplan/

- name: Setup network on Bedio
  hosts: bedio
  become: true

  tasks:
    - name: Copy Netplan configuration
      ansible.builtin.copy:
        src: bedio/00-myconfig.yaml
        dest: /etc/netplan/

- name: Setup network
  hosts: all
  become: true

  tasks:
    - name: Setup ipv6
      ansible.builtin.copy:
        src: all/sysctl.conf
        dest: /etc/
    - name: Copy resolved.conf
      ansible.builtin.copy:
        src: all/resolved.conf
        dest: /etc/systemd/
    - name: Create symlink
      ansible.builtin.shell:
        cmd: ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf

    - name: Add Nucio host to hosts
      lineinfile:
        dest: /etc/hosts
        line: 192.168.2.2 nucio.nowhere
    - name: Add Bedio host to hosts
      lineinfile:
        dest: /etc/hosts
        line: 192.168.2.3 bedio.nowhere

- name: Install basic packages
  hosts: all
  become: true

  tasks:
    - name: Install package
      ansible.builtin.apt:
        pkg:
          - nano
          - htop
          - bash-completion

- name: Configure login info
  hosts: all
  become: true

  tasks:
    - name: Remove packages
      ansible.builtin.apt:
        pkg:
          - ubuntu-advantage-tools
        state: absent

    - name: Install packages
      ansible.builtin.apt:
        pkg:
          - landscape-common
          - update-notifier-common

    - name: Remove unminimize message
      ansible.builtin.file:
        state: absent
        path: /etc/update-motd.d/60-unminimize

- name: Install nfs-common
  hosts: all
  become: true

  tasks:
    - name: Install package
      ansible.builtin.apt:
        name: nfs-common

- name: Install open-iscsi
  hosts: all
  become: true

  tasks:
    - name: Install package
      ansible.builtin.apt:
        name: open-iscsi

- name: Configure multipath
  hosts: all
  become: true

  tasks:
    - name: Copy multipath.conf
      ansible.builtin.copy:
        src: all/multipath.conf
        dest: /etc/
    - name: Restart multipathd
      ansible.builtin.service:
        name: multipathd
        state: restarted

- name: Remove snapd
  hosts: all
  become: true

  tasks:
    - name: Check if snap binary present
      stat:
        path: "/usr/bin/snap"
      register: snap_exist

    - name: Debug if snap installed
      debug:
        msg: "snap is installed"
      when: snap_exist.stat.exists

    - name: Check if packages are present
      ansible.builtin.shell:
        cmd: snap list
      register: snap_output
      when: snap_exist.stat.exists

    - name: Debug snap list
      debug:
        msg: "{{snap_output}}"
      when: snap_exist.stat.exists

    - name: Debug uninstall snap packages
      debug:
        msg: "Will uninstall packages"
      when:
        - snap_exist.stat.exists
        - snap_output is defined
        - '"No snaps are installed yet" not in snap_output.stderr'

    - name: Uninstall snap packages
      ansible.builtin.shell:
        cmd: snap remove --purge $(snap list | awk '!/^Name|^core/ {print $1}')
      when:
        - snap_exist.stat.exists
        - snap_output is defined
        - '"No snaps are installed yet" not in snap_output.stderr'

    - name: Remove snapd
      ansible.builtin.apt:
        name: snapd
        state: absent

- name: Remove packages
  hosts: all
  become: true

  tasks:
    - name: Remove avahi
      ansible.builtin.apt:
        name: avahi-daemon
        state: absent

- name: Stop unnecessary services
  hosts: all
  become: true
  gather_facts: false
  vars:
    stop_services:
      - wpa_supplicant.service
      - ModemManager.service

  tasks:
    - service_facts:

    - name: stop and disable a service
      service:
        name: "{{ item }}"
        state: stopped
        enabled: false
      when: "item in service_names"
      loop: "{{ stop_services }}"
      vars:
        service_names: "{{ services|dict2items|map(attribute='value.name')|list }}"

- name: Cleanup
  hosts: all
  become: true

  tasks:
    - name: Remove useless packages from the cache
      ansible.builtin.apt:
        autoclean: yes
    - name: Remove dependencies that are no longer required
      ansible.builtin.apt:
        autoremove: yes

- name: Reboot all machines
  hosts: all
  become: true

  tasks:
    - name: Reboot
      ansible.builtin.reboot:

- name: Copy k3s resolv.conf
  hosts: all
  become: true

  tasks:
    - name: Copy resolv.conf
      ansible.builtin.copy:
        src: all/resolv.conf
        dest: /etc/rancher/k3s/

- name: Install k3s on Nucio
  hosts: nucio
  become: true

  tasks:
    - name: Check if k3s binary present
      stat:
        path: "/usr/local/bin/k3s"
      register: k3s_exist

    - name: Install
      ansible.builtin.shell:
        cmd: curl -sfL https://get.k3s.io | K3S_RESOLV_CONF="/etc/rancher/k3s/resolv.conf" INSTALL_K3S_EXEC="--tls-san nucio.nowhere --disable traefik --disable servicelb --flannel-backend=host-gw" sh -s
      when: not k3s_exist.stat.exists

    - name: Get token
      ansible.builtin.slurp:
        src: /var/lib/rancher/k3s/server/node-token
      register: master_node_token

    - name: Debug token
      ansible.builtin.debug:
        msg: Token {{ master_node_token['content'] | b64decode | trim }}

- name: Install k3s on Bedio
  hosts: bedio
  become: true

  tasks:
    - name: Check if k3s binary present
      stat:
        path: "/usr/local/bin/k3s"
      register: k3s_exist

    - name: Install
      ansible.builtin.shell:
        cmd: curl -sfL https://get.k3s.io | K3S_URL=https://192.168.2.2:6443 K3S_RESOLV_CONF="/etc/rancher/k3s/resolv.conf" K3S_TOKEN={{hostvars['192.168.2.2'].master_node_token.content | b64decode | trim}} sh -s
      when: not k3s_exist.stat.exists

- name: Setup Docker registry
  hosts: all
  become: true

  tasks:
    - name: Creates directory
      ansible.builtin.file:
        path: /etc/rancher/k3s/
        state: directory

    - name: Copy registries.yaml
      ansible.builtin.copy:
        src: all/registries.yaml
        dest: /etc/rancher/k3s/

- name: Setup cronjob
  hosts: all
  become: true

  tasks:
    - name: Install crontab
      ansible.builtin.apt:
        name: cron
    - name: Create a clean k3s job
      ansible.builtin.cron:
        name: "clean k3s"
        minute: "0"
        hour: "2"
        job: "k3s crictl rmi --prune"

- name: Restart k3s on Nucio
  hosts: nucio
  become: true

  tasks:
    - name: Restart master
      ansible.builtin.service:
        name: k3s
        state: restarted

- name: Restart k3s on Bedio
  hosts: bedio
  become: true

  tasks:
    - name: Restart agent
      ansible.builtin.service:
        name: k3s-agent
        state: restarted
