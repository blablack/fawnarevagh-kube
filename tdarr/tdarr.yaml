apiVersion: batch/v1
kind: CronJob
metadata:
  name: clear-tdarr-backup
spec:
  schedule: "0 0 * * *"
  successfulJobsHistoryLimit: 0
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        metadata:
          labels:
            app: clear-tdarr-backup
            part-of: tdarr
        spec:
          volumes:
            - name: tdarr-pvc
              persistentVolumeClaim:
                claimName: tdarr-pvc
          affinity:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: "part-of"
                        operator: In
                        values:
                          - tdarr
                  topologyKey: "kubernetes.io/hostname"
          containers:
            - image: alpine:latest
              imagePullPolicy: Always
              name: clear-tdarr-backup
              command:
                - /bin/sh
                - -c
                - |
                  rm -rf /app/server/Tdarr/Backups/*
              volumeMounts:
                - mountPath: "/app/server"
                  subPath: "server"
                  name: tdarr-pvc
              resources:
                limits:
                  cpu: 200m
                  memory: 200Mi
                requests:
                  cpu: 100m
                  memory: 100Mi
          restartPolicy: Never
          dnsPolicy: "None"
          dnsConfig:
            nameservers:
              - 10.43.0.22
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tdarr
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: tdarr
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: tdarr
        part-of: tdarr
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - tdarr-node
              topologyKey: "kubernetes.io/hostname"
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "part-of"
                    operator: In
                    values:
                      - tdarr
              topologyKey: "kubernetes.io/hostname"
      volumes:
        - name: tdarr-pvc
          persistentVolumeClaim:
            claimName: tdarr-pvc
        - name: nasio-nfs-pvc
          persistentVolumeClaim:
            claimName: nasio-nfs-pvc
        - name: ffmpeg-data
          emptyDir: {}
      initContainers:
        - name: download-extract-ffmpeg
          image: alpine:latest
          command:
            - /bin/sh
            - -c
            - |
              apk add --no-cache wget tar xz &&
              wget https://github.com/jellyfin/jellyfin-ffmpeg/releases/download/v7.0.2-9/jellyfin-ffmpeg_7.0.2-9_portable_linux64-gpl.tar.xz -O /ffmpeg/ffmpeg.tar.xz &&
              cd /ffmpeg &&
              tar xf ffmpeg.tar.xz &&
              rm ffmpeg.tar.xz
          volumeMounts:
            - name: ffmpeg-data
              mountPath: /ffmpeg
      containers:
        - image: haveagitgat/tdarr:latest
          imagePullPolicy: Always
          name: tdarr
          volumeMounts:
            - mountPath: "/app/server"
              subPath: "server"
              name: tdarr-pvc
            - mountPath: "/app/configs"
              subPath: "configs"
              name: tdarr-pvc
            - mountPath: "/app/logs"
              subPath: "logs"
              name: tdarr-pvc
            - mountPath: "/data"
              name: nasio-nfs-pvc
            - name: ffmpeg-data
              mountPath: /ffmpeg
          env:
            - name: PUID
              value: "1026"
            - name: PGID
              value: "100"
            - name: TZ
              value: "EU/Dublin"
            - name: serverIP
              value: "0.0.0.0"
            - name: serverPort
              value: "8266"
            - name: webUIPort
              value: "8265"
            - name: internalNode
              value: "true"
            - name: inContainer
              value: "true"
            - name: nodeName
              value: "MainNode"
            - name: ffmpegPath
              value: "/ffmpeg/ffmpeg"
          startupProbe:
            httpGet:
              path: /
              port: 8265
            initialDelaySeconds: 120
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /
              port: 8265
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          livenessProbe:
            httpGet:
              path: /
              port: 8265
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 10
            failureThreshold: 5
          resources:
            limits:
              cpu: 2000m
              memory: 8Gi
              gpu.intel.com/i915: 1000m
            requests:
              cpu: 50m
              memory: 100Mi
              gpu.intel.com/i915: 1000m
      dnsPolicy: "None"
      dnsConfig:
        nameservers:
          - 10.43.0.22
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tdarr-node
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: tdarr-node
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: tdarr-node
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - tdarr
              topologyKey: "kubernetes.io/hostname"
      volumes:
        - name: tdarr-node-pvc
          persistentVolumeClaim:
            claimName: tdarr-node-pvc
        - name: nasio-nfs-pvc
          persistentVolumeClaim:
            claimName: nasio-nfs-pvc
        - name: ffmpeg-data
          emptyDir: {}
      initContainers:
        - name: download-extract-ffmpeg
          image: alpine:latest
          command:
            - /bin/sh
            - -c
            - |
              apk add --no-cache wget tar xz &&
              wget https://github.com/jellyfin/jellyfin-ffmpeg/releases/download/v7.0.2-9/jellyfin-ffmpeg_7.0.2-9_portable_linux64-gpl.tar.xz -O /ffmpeg/ffmpeg.tar.xz &&
              cd /ffmpeg &&
              tar xf ffmpeg.tar.xz &&
              rm ffmpeg.tar.xz
          volumeMounts:
            - name: ffmpeg-data
              mountPath: /ffmpeg
      containers:
        - image: haveagitgat/tdarr_node:latest
          imagePullPolicy: Always
          name: tdarr-node
          volumeMounts:
            - mountPath: "/app/configs"
              subPath: "configs"
              name: tdarr-node-pvc
            - mountPath: "/app/logs"
              subPath: "logs"
              name: tdarr-node-pvc
            - mountPath: "/data"
              name: nasio-nfs-pvc
            - name: ffmpeg-data
              mountPath: /ffmpeg
          env:
            - name: PUID
              value: "1026"
            - name: PGID
              value: "100"
            - name: TZ
              value: "EU/Dublin"
            - name: serverIP
              value: "10.43.0.25"
            - name: serverPort
              value: "8266"
            - name: inContainer
              value: "true"
            - name: nodeName
              value: "SecondNode"
            - name: ffmpegPath
              value: "/ffmpeg/ffmpeg"
          resources:
            limits:
              cpu: 2000m
              memory: 8Gi
              gpu.intel.com/i915: 1000m
            requests:
              cpu: 50m
              memory: 100Mi
              gpu.intel.com/i915: 1000m
      dnsPolicy: "None"
      dnsConfig:
        nameservers:
          - 10.43.0.22
---
apiVersion: v1
kind: Service
metadata:
  name: tdarr-internal
spec:
  clusterIP: 10.43.0.25
  ports:
    - port: 8265
      targetPort: 8265
      name: port8265
    - port: 8266
      targetPort: 8266
      name: port8266
  selector:
    app: tdarr
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: tdarr
  annotations:
    metallb.io/address-pool: default
    metallb.io/loadBalancerIPs: 192.168.2.221
spec:
  externalTrafficPolicy: Local
  selector:
    app: tdarr
  ports:
    - port: 80
      targetPort: 8265
  type: LoadBalancer
